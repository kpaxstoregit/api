generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                        String                   @id @default(uuid()) @db.Uuid
  email                     String                   @unique
  password                  String
  name                      String
  lastName                  String?
  phoneNumber               String?
  role                      Role                     @default(CLIENT)
  isPremium                 Boolean                  @default(false)
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  resetToken                String?
  resetTokenExpiration      DateTime?
  notificationPreferencesId String?                  @db.Uuid
  affiliate                 Affiliate?
  cart                      Cart?
  Comment                   Comment[]
  notificationPreferences   NotificationPreferences? @relation("UserNotificationPreferences")
  PasswordReset             PasswordReset[]
  authoredPosts             Post[]
  profile                   Profile?
  refreshTokens             RefreshToken[]
}

model NotificationPreferences {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @unique @db.Uuid
  emailNotification Boolean  @default(false)
  smsNotification   Boolean  @default(false)
  theme             String   @default("Light")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation("UserNotificationPreferences", fields: [userId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  userId    String   @db.Uuid
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Profile {
  id     String  @id @default(uuid()) @db.Uuid
  bio    String?
  userId String  @unique @db.Uuid
  user   User    @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Affiliate {
  id             String @id @default(uuid()) @db.Uuid
  userId         String @unique @db.Uuid
  code           String @unique
  commissionRate Float
  user           User   @relation(fields: [userId], references: [id])
}

model Product {
  id              String        @id @default(uuid()) @db.Uuid
  name            String
  description     String
  price           Float
  weight          Float
  stock           Int
  category        String
  imageUrls       String[]
  title           String
  suggestionOfUse String
  benefit         String
  composition     String
  promotion       Float?
  status          ProductStatus @default(NOVIDADE)
  classification  Int?
  slug            String?       @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  cartItems       CartItem[]
  coupons         Coupon[]      @relation("ProductCoupons")
}

model Coupon {
  id            String    @id @default(uuid()) @db.Uuid
  code          String    @unique
  description   String?
  discountValue Float
  isActive      Boolean   @default(true)
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[] @relation("ProductCoupons")
}

model Cart {
  id         String     @id @default(uuid()) @db.Uuid
  userId     String     @unique @db.Uuid
  totalPrice Float      @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id])
  cartItems  CartItem[]
}

model CartItem {
  id        String   @id @default(uuid()) @db.Uuid
  cartId    String   @db.Uuid
  productId String   @db.Uuid
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Contact {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Newsletter {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  createdAt DateTime @default(now())
}

model Post {
  id           String    @id @default(uuid()) @db.Uuid
  title        String
  content      String
  authorId     String    @db.Uuid
  published    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  authorAvatar String?
  authorBio    String?
  benefits     Json?
  date         DateTime
  image        String
  readingTime  Int
  references   String[]
  slug         String    @unique
  tags         String[]
  updatedAt    DateTime  @updatedAt
  Comment      Comment[]
  author       User      @relation(fields: [authorId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    String   @db.Uuid
  authorId  String   @db.Uuid
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

enum Role {
  ADMIN
  CLIENT
  AFFILIATE
  PREMIUM_CLIENT
}

enum ProductStatus {
  NOVIDADE
  HOT
}
