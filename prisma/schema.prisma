generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  password  String
  name      String
  role      Role     @default(CLIENT)
  isPremium Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resetToken           String?
  resetTokenExpiration DateTime?

  profile       Profile?
  affiliate     Affiliate?
  refreshTokens RefreshToken[]
  PasswordReset PasswordReset[]
  Comment       Comment[]
  authoredPosts Post[]
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model Profile {
  id     String  @id @default(uuid()) @db.Uuid
  bio    String?
  userId String  @unique @db.Uuid
  user   User    @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
}

model Affiliate {
  id             String @id @default(uuid()) @db.Uuid
  userId         String @unique @db.Uuid
  user           User   @relation(fields: [userId], references: [id])
  code           String @unique
  commissionRate Float
}

enum Role {
  ADMIN
  CLIENT
  AFFILIATE
  PREMIUM_CLIENT
}

enum ProductStatus {
  NOVIDADE // ou NEW, dependendo da escolha
  HOT
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  weight      Float
  stock       Int
  category    String
  imageUrls   String[]
  title       String // Agora obrigat√≥rio

  suggestionOfUse String?
  benefit         String?
  composition     String?

  promotion Float?

  status ProductStatus @default(NOVIDADE)

  classification Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Newsletter {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  createdAt DateTime @default(now())
}

model Post {
  id         String    @id @default(uuid()) @db.Uuid
  title      String
  content    String
  authorId   String    @db.Uuid
  author     User      @relation(fields: [authorId], references: [id])
  categoryId Int?
  comments   Comment[]
  published  Boolean   @default(false)

  createdAt DateTime @default(now())
}

model Comment {
  id       Int    @id @default(autoincrement())
  content  String
  postId   String @db.Uuid
  post     Post   @relation(fields: [postId], references: [id])
  authorId String @db.Uuid
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
}
